{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "javascriptreact",
		"prefix": "curd",
		"body": [
			"import React, { Component, Fragment } from 'react';",
			"import { Button, Col, Form, Input, Row, Icon } from 'antd';",
			"import { connect } from 'dva';",
			"import PageHeader from 'components/PageHeader';",
			"import { GlobalCard, GlobalTable, GlobalModal } from 'globalUI/index';",
			"import {",
			"globalFormItemLayout,",
			"globalFormItemBox,",
			"globalColProps,",
			"globalDefineListSize",
			"} from 'common/config';",

			"const FormItem = Form.Item;",
			"const ButtonGroup = Button.Group;",
			"const filterObj = {",
			"pageNum: 1,",
			"pageSize: 10,",
			"};",

			"@Form.create()",
			"@connect(({ Model, loading }) => ({",
			"Model,",
			"mainSearchLoading: loading.effects['taskModel/']",
			"}))",
			"export default class Organization extends Component {",
			"constructor(props) {",
			"super(props);",
			"this.state = {",
			"filterObj: { ...filterObj },",
			"visible: false,",
			"isAdvanced: false",
			"};",
			"}",

			"componentDidMount() {",
			"this.basePageRequest();",
			"}",

			"handleReset = () => {",
			"this.props.form.resetFields();",
			"this.setState({ filterObj: { ...filterObj } });",
			"this.basePageRequest();",
			"};",

			"basePageRequest = value => {",
			"this.props.dispatch({",
			"type: 'taskModel/getTaskList',",
			"payloadMain: value ? value : globalDefineListSize",
			"});",

			"this.props.dispatch({ type: 'taskModel/getTaskColumns' });",
			"};",

			"handleSearch = () => {",
			"this.props.form.validateFields((err, fields) => {",
			"if (err) {",
			"return;",
			"}",
			"let payloadData = {",
			"taskId: fields.taskId,",
			"taskName: fields.taskName,",
			"...globalDefineListSize",
			"};",
			"this.setState({ filterObj: { ...payloadData } });",
			"this.basePageRequest(payloadData);",
			"});",
			"};",

			"handleAddTask = () => {",
			"this.setState({ visible: true });",
			"};",

			"finishAddModal = () => {",
			"this.setState({ visible: false });",
			"};",

			"cancelTaskModal = () => {",
			"this.setState({ visible: false });",
			"};",

			"showMoreFilter = isAdvanced => {",
			"this.setState({ isAdvanced: !isAdvanced });",
			"};",

			"render() {",
			"const { visibleAddTask, filterObj, isAdvanced } = this.state;",
			"const { form, taskModel, mainSearchLoading } = this.props;",
			"const { getFieldDecorator } = form;",
			"const { resList, resTotal, columns } = taskModel;",
			"const content = () => {",
			"return (",
			"<Fragment>",
			"<GlobalCard",
			"title={'信息筛选'}",
			"extra={",
			"<a onClick={() => this.showMoreFilter(isAdvanced)}>",
			"{isAdvanced ? (",
			"<Fragment>",
			"<Icon type={'up'} />",
			"{'收起高级搜索'}",
			"</Fragment>",
			") : (",
			"<Fragment>",
			"<Icon type={'reload'} />",
			"{'展开高级搜索'}",
			"</Fragment>",
			")}",
			"</a>",
			"}",
			">",
			"<Form",
			"layout={'horizontal'}",
			"onSubmit={this.handleSearch}",
			">",
			"<Row>",
			"<Col {...globalColProps}>",
			"<FormItem",
			"{...globalFormItemLayout}",
			"label={'任务编号'}",
			">",
			"{getFieldDecorator('taskId')(",
			"<Input {...globalFormItemBox} />",
			")}",
			"</FormItem>",
			"</Col>",
			"<Col {...globalColProps}>",
			"<FormItem",
			"{...globalFormItemLayout}",
			"label={'任务名称'}",
			">",
			"{getFieldDecorator('taskName')(",
			"<Input {...globalFormItemBox} />",
			")}",
			"</FormItem>",
			"</Col>",
			"{isAdvanced ? (",
			"<Fragment>",
			"<Col {...globalColProps}>",
			"<FormItem",
			"{...globalFormItemLayout}",
			"label={'主办人'}",
			">",
			"{getFieldDecorator('taskName')(",
			"<UserListSelect />",
			")}",
			"</FormItem>",
			"</Col>",
			"<Col {...globalColProps}>",
			"<FormItem",
			"{...globalFormItemLayout}",
			"label={'主办人'}",
			">",
			"{getFieldDecorator(",
			"'mainPerson'",
			")(<UserListSelect />)}",
			"</FormItem>",
			"</Col>",
			"<Col {...globalColProps}>",
			"<FormItem",
			"{...globalFormItemLayout}",
			"label={'协办人'}",
			">",
			"{getFieldDecorator(",
			"'helpPerson'",
			")(<UserListSelect />)}",
			"</FormItem>",
			"</Col>",
			"<Col {...globalColProps}>",
			"<FormItem",
			"{...globalFormItemLayout}",
			"label={'优先级'}",
			">",
			"{getFieldDecorator('priority')(",
			"<Input",
			"{...globalFormItemBox}",
			"/>",
			")}",
			"</FormItem>",
			"</Col>",
			"</Fragment>",
			") : null}",
			"</Row>",
			"<Row>",
			"<Col style={{ float: 'right' }}>",
			"<ButtonGroup>",
			"<Button",
			"type={'primary'}",
			"icon={'search'}",
			"onClick={this.handleSearch}",
			">",
			"搜索",
			"</Button>",
			"<Button",
			"type={'danger'}",
			"icon={'reload'}",
			"onClick={this.handleReset}",
			">",
			"重置",
			"</Button>",
			"</ButtonGroup>",
			"</Col>",
			"</Row>",
			"</Form>",
			"</GlobalCard>",
			"<GlobalCard",
			"title={'信息列表'}",
			"extra={",
			"<ButtonGroup>",
			"<Button onClick={this.handleAddTask}>",
			"新增模版任务",
			"</Button>",
			"<Button onClick={this.handleAddTask}>",
			"新增自定义任务",
			"</Button>",
			"</ButtonGroup>",
			"}",
			">",
			"<GlobalTable",
			"basePageRequest={this.basePageRequest}",
			"filterObj={filterObj}",
			"columns={columns}",
			"resList={resList}",
			"resTotal={resTotal}",
			"rowKeys={'id'}",
			"loading={mainSearchLoading}",
			"/>",
			"</GlobalCard>",
			"</Fragment>",
			");",
			"};",

			"return (",
			"<Fragment>",
			"<PageHeader",
			"breadcrumbList={[{ title: '' }]}",
			"content={content()}",
			"/>",
			"<GlobalModal",
			"visible={visibleAddTask}",
			"title={'新增任务'}",
			"width={600}",
			"onCancel={this.finishAddTaskModal}",
			"onOk={this.finishAddTaskModal}",
			">",
			"</GlobalModal>",
			"</Fragment>",
			");",
			"}",
			"}",


		],
		"description": "react antd curd"
	}

}
